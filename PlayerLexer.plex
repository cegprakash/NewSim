<?php
namespace ThroughBall;
class PlayerLexer
{
    /**
     * describes how to convert a token into a human-readable element for error messages
     *
     * @var array array of token number => textual description of that token
     */
    static $humanReadableTokenNames = array(
        self::INIT => 'init',
        self::IDENTIFIER => '<identifier>',
        self::OPENPAREN => '(',
        self::CLOSEPAREN => ')',
        self::SIDE => 'l|r',
        self::NUMBER => '<number>',
        self::REALNUMBER => '<real number>',
        self::VER => 'ver',
        self::OK => 'ok',
        self::COMPRESSION => 'compression',
        self::WARNING => 'warning',
        self::ERROR => 'error',
        self::RECONNECT => 'reconnect',
        self::SERVERPARAM => 'server_param',
        self::PLAYERPARAM => 'player_param',
        self::PLAYERTYPE => 'player_type',
        self::SENSEBODY => 'sense_body',
        self::VIEWMODE => 'view_mode',
        self::HIGHLOW => 'high/low',
        self::VIEWWIDTH => 'narrow/normal/wide',
        self::QUOTEDSTRING => '<string>',
        self::GOALIE => 'goalie',
        self::SEE => 'see',
    );

    const INIT = 1;
    const IDENTIFIER = 2;
    const OPENPAREN = 3;
    const CLOSEPAREN = 4;
    const SIDE = 5;
    const NUMBER = 6;
    const REALNUMBER = 7;
    const VER = 8;
    const OK = 9;
    const COMPRESSION = 10;
    const WARNING = 11;
    const RECONNECT = 12;
    const ERROR = 13;
    const SERVERPARAM = 14;
    const PLAYERPARAM = 15;
    const PLAYERTYPE = 16;
    const SENSEBODY = 17;
    const VIEWMODE = 18;
    const HIGHLOW = 19;
    const VIEWWIDTH = 20;
    const QUOTEDSTRING = 21;
    const GOALIE = 22;
    const SEE = 23;

    private $input;
    public $N;
    public $token;
    public $value;
    public $line;
    public $debug = false;
    public $logger;
    private $_string = '';

    function __construct($data, Logger $log = null)
    {
        $this->input = str_replace("\r\n", "\n", $data);
        $this->N = 0;
        if (null !== $log) {
            $this->debug = true;
            $this->logger = $log;
        }
    }

    /**
     * @param array $tokens an associative array mapping token names to something else
     * @return string a comma-delimited list of human-readable names of the tokens
     */
    function getHumanReadableNames(array $tokens)
    {
        $ret = '';
        foreach ($tokens as $token) {
            if ($ret) {
                $ret .= ', ';
            }
            $ret .= self::$humanReadableTokenNames[$token];
        }
        return $ret; 
    }

    function debug()
    {
        $this->debug = true;
        $this->logger = new DebugEchoLogger;
    }

/*!lex2php
%input $this->input
%counter $this->N
%token $this->token
%value $this->value
%line $this->line

IDENTIFIER = /[\-_a-zA-Z0-9]+/
WHITESPACE = /\s+|\r|\n/
ERROR = "error"
ERRORTYPE = /[a-zA-Z_]+/
SIDE = /l|r/
NUMBER = /-?[0-9]+/
REALNUMBER = /-?[0-9]+\.[0-9]+/
HIGHLOW = /high|low/
VIEWWIDTH = /narrow|normal|wide/

STRINGCONTENTS = /[^\["\\]+/
ESCAPEDTHING = @"|\\@
ANYTHINGELSE = /./

*/
/*!lex2php
%statename YYINITIAL

"(" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->yypushstate(self::INTAG);
    $this->token = self::OPENPAREN;
}

WHITESPACE {
    if ($this->debug) $this->logger->log("whitespace [" . $this->value . "]");
    return false;
}
*/
/*!lex2php
%statename INTAG

"(" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->yypushstate(self::INTAG);
    $this->token = self::OPENPAREN;
}

")" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->token = self::CLOSEPAREN;
    $this->yypopstate();
}

"init" {
    if ($this->debug) $this->logger->log("init [" . $this->value . "]");
    $this->token = self::INIT;
}

"\"" {
    if ($this->debug) $this->logger->log("begin string");
    $this->yypushstate(self::INSTRING);
    $this->_string = '';
    $this->N++; // skip the opening quote
    return true;
}

"reconnect" {
    if ($this->debug) $this->logger->log("reconnect [" . $this->value . "]");
    $this->token = self::RECONNECT;
}

"version" {
    if ($this->debug) $this->logger->log("version [" . $this->value . "]");
    $this->token = self::VERSION;
}

"clang " {
    if ($this->debug) $this->logger->log("clang [" . $this->value . "]");
    $this->token = self::CLANG;
    $this->N--;
}

"goalie " {
    if ($this->debug) $this->logger->log("goalie [" . $this->value . "]");
    $this->token = self::GOALIE;
    $this->N--;
}

"error" {
    if ($this->debug) $this->logger->log("error [" . $this->value . "]");
    $this->yypushstate(self::INERROR);
    $this->token = self::ERROR;
}

"warning" {
    if ($this->debug) $this->logger->log("warning [" . $this->value . "]");
    $this->yypushstate(self::INERROR);
    $this->token = self::WARNING;
}

"server_param" {
    if ($this->debug) $this->logger->log("server_param [" . $this->value . "]");
    $this->token = self::SERVERPARAM;
}

"player_param" {
    if ($this->debug) $this->logger->log("player_param [" . $this->value . "]");
    $this->token = self::PLAYERPARAM;
}

"player_type" {
    if ($this->debug) $this->logger->log("player_type [" . $this->value . "]");
    $this->token = self::PLAYERTYPE;
}

"see" {
    if ($this->debug) $this->logger->log("see [" . $this->value . "]");
    $this->token = self::SEE;
}

"sense_body" {
    if ($this->debug) $this->logger->log("sense_body [" . $this->value . "]");
    $this->token = self::SENSEBODY;
}

WHITESPACE {
    if ($this->debug) $this->logger->log("whitespace [" . $this->value . "]");
    return false;
}

REALNUMBER {
    if ($this->debug) $this->logger->log("real number [" . $this->value . "]");
    $this->token = self::REALNUMBER;
}

NUMBER {
    if ($this->debug) $this->logger->log("number [" . $this->value . "]");
    $this->token = self::NUMBER;
}

IDENTIFIER {
    if ($this->debug) $this->logger->log("identifier [" . $this->value . "]");
    $this->token = self::IDENTIFIER;
}
*/
/*!lex2php
%statename INSTRING
"\\" {
    if ($this->debug) $this->logger->log("string escape");
    $this->yybegin(self::INESCAPE);
    return true;
}

"\"" {
    if ($this->debug) $this->logger->log("returning string [$this->_string]");
    $this->yypopstate();
    $this->value = $this->_string;
    $this->token = self::QUOTEDSTRING;
    $this->N -= strlen($this->_string) - 1; // make sure the counter is right
    $this->_string = '';
}

STRINGCONTENTS {
    if ($this->debug) $this->logger->log("added to string [".$this->value."]");
    $this->_string .= $this->value;
    return false;
}
*/
/*!lex2php
%statename INESCAPE
ESCAPEDTHING {
    if ($this->debug) $this->logger->log("escape [".$this->value."]");
    $this->_string .= '\\' . $this->value;
    return false;
}

ANYTHINGELSE {
    if ($this->debug) $this->logger->log("non-escape [".$this->value."]");
    $this->yybegin(self::INSTRING);
    $this->_string .= $this->value;
    return true;
}
*/
/*lex2php
%statename INERROR
ERRORTYPE {
    if ($this->debug) $this->logger->log("error type [" . $this->value . "]");
    $this->token = self::ERRORTYPE;
}

")" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->token = self::CLOSEPAREN;
    $this->yypopstate();
}
*/
}
class Exception extends \Exception {}

class Logger {
    function log($d) {echo $d,"\n";}
}

$a = new PlayerLexer('(player_type (id 0)(player_speed_max 1.05)(stamina_inc_max 45)(player_decay 0.4)(inertia_moment 5)(dash_power_rate 0.006)(player_size 0.3)(kickable_margin 0.7)(kick_rand 0.1)(extra_stamina 50)(effort_max 1)(effort_min 0.6)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1))
(player_type (id 1)(player_speed_max 1.05)(stamina_inc_max 50.5118)(player_decay 0.357182)(inertia_moment 3.92956)(dash_power_rate 0.00508136)(player_size 0.3)(kickable_margin 0.602344)(kick_rand 0.00234432)(extra_stamina 60.5673)(effort_max 0.957731)(effort_min 0.557731)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.1378))
(player_type (id 2)(player_speed_max 1.05)(stamina_inc_max 50.4729)(player_decay 0.385374)(inertia_moment 4.63434)(dash_power_rate 0.00508785)(player_size 0.3)(kickable_margin 0.650137)(kick_rand 0.0501373)(extra_stamina 58.9027)(effort_max 0.964389)(effort_min 0.564389)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.16176))
(player_type (id 3)(player_speed_max 1.05)(stamina_inc_max 47.4927)(player_decay 0.480545)(inertia_moment 7.01362)(dash_power_rate 0.00558456)(player_size 0.3)(kickable_margin 0.737363)(kick_rand 0.137363)(extra_stamina 71.4044)(effort_max 0.914382)(effort_min 0.514382)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.1525))
(player_type (id 4)(player_speed_max 1.05)(stamina_inc_max 40.9819)(player_decay 0.374981)(inertia_moment 4.37454)(dash_power_rate 0.00666968)(player_size 0.3)(kickable_margin 0.736458)(kick_rand 0.136458)(extra_stamina 64.9099)(effort_max 0.94036)(effort_min 0.54036)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.16664))
(player_type (id 5)(player_speed_max 1.05)(stamina_inc_max 41.1314)(player_decay 0.333783)(inertia_moment 3.34457)(dash_power_rate 0.00664477)(player_size 0.3)(kickable_margin 0.699612)(kick_rand 0.0996124)(extra_stamina 87.9217)(effort_max 0.848313)(effort_min 0.448313)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.12177))
(player_type (id 6)(player_speed_max 1.05)(stamina_inc_max 44.756)(player_decay 0.445059)(inertia_moment 6.12647)(dash_power_rate 0.00604067)(player_size 0.3)(kickable_margin 0.710795)(kick_rand 0.110795)(extra_stamina 65.5066)(effort_max 0.937974)(effort_min 0.537974)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.08401))
(player_type (id 7)(player_speed_max 1.05)(stamina_inc_max 47.1423)(player_decay 0.427853)(inertia_moment 5.69632)(dash_power_rate 0.00564294)(player_size 0.3)(kickable_margin 0.659713)(kick_rand 0.0597132)(extra_stamina 67.9843)(effort_max 0.928063)(effort_min 0.528063)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.09086))
(player_type (id 8)(player_speed_max 1.05)(stamina_inc_max 44.331)(player_decay 0.322285)(inertia_moment 3.05713)(dash_power_rate 0.0061115)(player_size 0.3)(kickable_margin 0.723172)(kick_rand 0.123172)(extra_stamina 50.3063)(effort_max 0.998775)(effort_min 0.598775)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.04395))
(player_type (id 9)(player_speed_max 1.05)(stamina_inc_max 45.0234)(player_decay 0.392372)(inertia_moment 4.8093)(dash_power_rate 0.00599611)(player_size 0.3)(kickable_margin 0.651256)(kick_rand 0.0512559)(extra_stamina 55.4959)(effort_max 0.978016)(effort_min 0.578016)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.23937))
(player_type (id 10)(player_speed_max 1.05)(stamina_inc_max 42.4378)(player_decay 0.451899)(inertia_moment 6.29747)(dash_power_rate 0.00642703)(player_size 0.3)(kickable_margin 0.678293)(kick_rand 0.0782927)(extra_stamina 89.3623)(effort_max 0.842551)(effort_min 0.442551)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.15373))
(player_type (id 11)(player_speed_max 1.05)(stamina_inc_max 44.7766)(player_decay 0.340951)(inertia_moment 3.52378)(dash_power_rate 0.00603723)(player_size 0.3)(kickable_margin 0.701646)(kick_rand 0.101646)(extra_stamina 60.3915)(effort_max 0.958434)(effort_min 0.558434)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.19378))
(player_type (id 12)(player_speed_max 1.05)(stamina_inc_max 47.0823)(player_decay 0.418087)(inertia_moment 5.45218)(dash_power_rate 0.00565294)(player_size 0.3)(kickable_margin 0.649797)(kick_rand 0.0497967)(extra_stamina 76.2266)(effort_max 0.895093)(effort_min 0.495093)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.16837))
(player_type (id 13)(player_speed_max 1.05)(stamina_inc_max 47.1396)(player_decay 0.359522)(inertia_moment 3.98806)(dash_power_rate 0.0056434)(player_size 0.3)(kickable_margin 0.601979)(kick_rand 0.00197928)(extra_stamina 66.2142)(effort_max 0.935143)(effort_min 0.535143)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.07105))
(player_type (id 14)(player_speed_max 1.05)(stamina_inc_max 48.5083)(player_decay 0.496808)(inertia_moment 7.4202)(dash_power_rate 0.00541529)(player_size 0.3)(kickable_margin 0.769064)(kick_rand 0.169064)(extra_stamina 93.8204)(effort_max 0.824718)(effort_min 0.424718)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.03525))
(player_type (id 15)(player_speed_max 1.05)(stamina_inc_max 42.9907)(player_decay 0.30048)(inertia_moment 2.512)(dash_power_rate 0.00633489)(player_size 0.3)(kickable_margin 0.698267)(kick_rand 0.0982671)(extra_stamina 61.3236)(effort_max 0.954706)(effort_min 0.554706)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.27537))
(player_type (id 16)(player_speed_max 1.05)(stamina_inc_max 52.0315)(player_decay 0.496966)(inertia_moment 7.42414)(dash_power_rate 0.00482809)(player_size 0.3)(kickable_margin 0.66465)(kick_rand 0.0646502)(extra_stamina 53.8184)(effort_max 0.984726)(effort_min 0.584726)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.06471))
(player_type (id 17)(player_speed_max 1.05)(stamina_inc_max 49.1448)(player_decay 0.43318)(inertia_moment 5.82951)(dash_power_rate 0.00530919)(player_size 0.3)(kickable_margin 0.7625)(kick_rand 0.1625)(extra_stamina 70.1553)(effort_max 0.919379)(effort_min 0.519379)(kick_power_rate 0.027)(foul_detect_probability 0.5)(catchable_area_l_stretch 1.23044))', new Logger);
$a->debug = true;

while ($a->yylex());
