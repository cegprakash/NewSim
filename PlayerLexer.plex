<?php
namespace ThroughBall;
class PlayerLexer
{
    /**
     * describes how to convert a token into a human-readable element for error messages
     *
     * @var array array of token number => textual description of that token
     */
    static $humanReadableTokenNames = array(
        self::INIT => 'init',
        self::IDENTIFIER => '<identifier>',
        self::OPENPAREN => '(',
        self::CLOSEPAREN => ')',
        self::SIDE => 'l|r',
        self::NUMBER => '<number>',
        self::REALNUMBER => '<real number>',
        self::VER => 'ver',
        self::OK => 'ok',
        self::COMPRESSION => 'compression',
        self::WARNING => 'warning',
        self::ERROR => 'error',
        self::RECONNECT => 'reconnect',
        self::SERVERPARAM => 'server_param',
        self::PLAYERPARAM => 'player_param',
        self::PLAYERTYPE => 'player_type',
        self::SENSEBODY => 'sense_body',
        self::VIEWMODE => 'view_mode',
        self::HIGHLOW => 'high/low',
        self::VIEWWIDTH => 'narrow/normal/wide',
        self::QUOTEDSTRING => '<string>',
        self::GOALIE => 'goalie',
        self::SEE => 'see',
        self::BALL => '< ball (b)>', // ball inside view cone
        self::UNCLEARBALL => '<unclear ball (B)>', // ball near but outside view cone
        self::UNCLEARFLAG => '<unclear flag (B)>',
        self::UNCLEARPLAYER => '<unclear player (P)>',
        self::UNCLEARGOAL => '<unclear goal (G)>',
        self::GOALL => 'left goal center point (g l)',
        self::GOALR => 'right goal center point (g r)',
        self::CENTERFLAG => 'center flag (f c)',
        self::LEFTTOPFLAG => 'corner flag left/top (f l t)',
        self::CENTERTOPFLAG => 'flag center/top (f c t)',
        self::RIGHTTOPFLAG => 'corner flag right/top (f r t)',
        self::LEFTBOTTOMFLAG => 'corner flag left/bottom (f l b)',
        self::CENTERBOTTOMFLAG => 'flag center/bottom (f c b)',
        self::RIGHTBOTTOMFLAG => 'corner flag right/bottom (f r b)',
        self::LINERIGHT => 'right line (l r)',
        self::LINETOP => 'top line (l t)',
        self::LINELEFT => 'left line (l l)',
        self::LINEBOTTOM => 'bottom line (l b)',
        self::FLAGRIGHT => 'right flag (f r 0)',
        self::FLAGTOP => 'top flag (f t 0)',
        self::FLAGLEFT => 'left flag (f l 0)',
        self::FLAGBOTTOM => 'bottom flag (f b 0)',
	self::VIRTUALFLAG => 'virtual flag',        
        self::PLAYER => 'player (p)',
        self::STAMINA => 'stamina',
        self::SPEED => 'speed',
        self::ARM => 'arm',
        self::TARGET => 'target',
        self::FOCUS => 'focus',
        self::TACKLE => 'tackle',
        self::FOUL => 'foul',
        self::COLLISION => 'collision',
        self::HEAR => 'hear',
        self::CHANGEPLAYERTYPE => 'change_player_type',
    );

    const INIT = 1;
    const IDENTIFIER = 2;
    const OPENPAREN = 3;
    const CLOSEPAREN = 4;
    const SIDE = 5;
    const NUMBER = 6;
    const REALNUMBER = 7;
    const VER = 8;
    const OK = 9;
    const COMPRESSION = 10;
    const WARNING = 11;
    const RECONNECT = 12;
    const ERROR = 13;
    const SERVERPARAM = 14;
    const PLAYERPARAM = 15;
    const PLAYERTYPE = 16;
    const SENSEBODY = 17;
    const VIEWMODE = 18;
    const HIGHLOW = 19;
    const VIEWWIDTH = 20;
    const QUOTEDSTRING = 21;
    const GOALIE = 22;
    const SEE = 23;
    const UNCLEARBALL = 24;
    const UNCLEARFLAG = 25;
    const UNCLEARPLAYER = 26;
    const UNCLEARGOAL = 27;
    const GOALL = 28;
    const GOALR = 29;
    const CENTERFLAG = 30;
    const LEFTTOPFLAG = 31;
    const CENTERTOPFLAG = 32;
    const RIGHTTOPFLAG = 33;
    const LEFTBOTTOMFLAG = 34;
    const CENTERBOTTOMFLAG = 35;
    const RIGHTBOTTOMFLAG = 36;
    const LINERIGHT = 37;
    const LINETOP = 38;
    const LINELEFT = 39;
    const LINEBOTTOM = 40;
    const FLAGRIGHT = 41;
    const FLAGTOP = 42;
    const FLAGLEFT = 43;
    const FLAGBOTTOM = 44;
    const VIRTUALFLAG = 45;
    
    const PENALTYRIGHTTOP = 46;
    const PENALTYRIGHTCENTER = 47;
    const PENALTYRIGHTBOTTOM = 48;
    const PLAYER = 49;
    const BALL = 50;
    const STAMINA = 51;
    const SPEED = 52;
    const ARM = 53;
    const TARGET = 54;
    const FOCUS = 55;
    const TACKLE = 56;
    const FOUL = 57;
    const COLLISION = 58;
    const HEAR = 59;
    const CHANGEPLAYERTYPE = 60;

    private $input;
    public $N;
    public $token;
    public $value;
    public $line;
    public $debug = false;
    public $logger;
    private $_string = '';

    function setup($data, Logger $log = null)
    {
        $this->input = str_replace("\r\n", "\n", $data);
        $this->N = 0;
        if (null !== $log) {
            $this->debug = true;
            $this->logger = $log;
        }
    }

    /**
     * @param array $tokens an associative array mapping token names to something else
     * @return string a comma-delimited list of human-readable names of the tokens
     */
    function getHumanReadableNames(array $tokens)
    {
        $ret = '';
        foreach ($tokens as $token) {
            if ($ret) {
                $ret .= ', ';
            }
            $ret .= self::$humanReadableTokenNames[$token];
        }
        return $ret; 
    }

    function debug()
    {
        $this->debug = true;
        $this->logger = new DebugEchoLogger;
    }

/*!lex2php
%input $this->input
%counter $this->N
%token $this->token
%value $this->value
%line $this->line

IDENTIFIER = /[\-_a-zA-Z0-9]+/
WHITESPACE = /\s+|\r|\n|\x00/
ERROR = "error"
ERRORTYPE = /[a-zA-Z_]+/
SIDE = /l|r/
NUMBER = /-?[0-9]+/
REALNUMBER = /-?[0-9]+\.[0-9]+(e-?[0-9]+)?/
HIGHLOW = /high|low/
VIEWWIDTH = /narrow|normal|wide/
FLAG = /\(f [tblr] [tblr] [1-5]0\)/
FLAG2 = /\(f [pg] [lr] [tbc]\)/

STRINGCONTENTS = /[^\["\\]+/
ESCAPEDTHING = @"|\\@
ANYTHINGELSE = /./

*/
/*!lex2php
%statename YYINITIAL

"(" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->yypushstate(self::INTAG);
    $this->token = self::OPENPAREN;
}

WHITESPACE {
    if ($this->debug) $this->logger->log("whitespace [" . $this->value . "]");
    return false;
}
*/
/*!lex2php
%statename INTAG

"(B)" {
    if ($this->debug) $this->logger->log("unclear ball [" . $this->value . "]");
    $this->token = self::UNCLEARBALL;
}

"(b)" {
    if ($this->debug) $this->logger->log("ball [" . $this->value . "]");
    $this->token = self::BALL;
}

"(P)" {
    if ($this->debug) $this->logger->log("unclear player [" . $this->value . "]");
    $this->token = self::UNCLEARPLAYER;
}

"(p)" {
    if ($this->debug) $this->logger->log("unclear player [" . $this->value . "]");
    $this->token = self::UNCLEARPLAYER;
}

"(F)" {
    if ($this->debug) $this->logger->log("unclear flag [" . $this->value . "]");
    $this->token = self::UNCLEARFLAG;
}

"(G)" {
    if ($this->debug) $this->logger->log("unclear goal [" . $this->value . "]");
    $this->token = self::UNCLEARGOAL;
}

"(g l)" {
    if ($this->debug) $this->logger->log("left goal [" . $this->value . "]");
    $this->token = self::GOALL;
}

"(g r)" {
    if ($this->debug) $this->logger->log("right goal [" . $this->value . "]");
    $this->token = self::GOALR;
}

FLAG2 {
    if ($this->debug) $this->logger->log("virtual flag [" . $this->value . "]");
    $this->token = self::VIRTUALFLAG;
}

"(f c)" {
    if ($this->debug) $this->logger->log("center flag [" . $this->value . "]");
    $this->token = self::CENTERFLAG;
}

"(f l t)" {
    if ($this->debug) $this->logger->log("corner flag left/top [" . $this->value . "]");
    $this->token = self::LEFTTOPFLAG;
}

"(f c t)" {
    if ($this->debug) $this->logger->log("flag center/top [" . $this->value . "]");
    $this->token = self::CENTERTOPFLAG;
}

"(f r t)" {
    if ($this->debug) $this->logger->log("corner flag right/top [" . $this->value . "]");
    $this->token = self::RIGHTTOPFLAG;
}

"(f l b)" {
    if ($this->debug) $this->logger->log("corner flag left/bottom [" . $this->value . "]");
    $this->token = self::LEFTBOTTOMFLAG;
}

"(f c b)" {
    if ($this->debug) $this->logger->log("flag center/bottom [" . $this->value . "]");
    $this->token = self::CENTERBOTTOMFLAG;
}

"(f r b)" {
    if ($this->debug) $this->logger->log("corner flag right/bottom [" . $this->value . "]");
    $this->token = self::RIGHTBOTTOMFLAG;
}

"(l r)" {
    if ($this->debug) $this->logger->log("right line [" . $this->value . "]");
    $this->token = self::LINERIGHT;
}

"(l t)" {
    if ($this->debug) $this->logger->log("top line [" . $this->value . "]");
    $this->token = self::LINETOP;
}

"(l l)" {
    if ($this->debug) $this->logger->log("left line [" . $this->value . "]");
    $this->token = self::LINELEFT;
}

"(l b)" {
    if ($this->debug) $this->logger->log("bottom line [" . $this->value . "]");
    $this->token = self::LINEBOTTOM;
}

"(f r 0)" {
    if ($this->debug) $this->logger->log("right flag [" . $this->value . "]");
    $this->token = self::FLAGRIGHT;
}

"(f t 0)" {
    if ($this->debug) $this->logger->log("top flag [" . $this->value . "]");
    $this->token = self::FLAGTOP;
}

"(f l 0)" {
    if ($this->debug) $this->logger->log("left flag [" . $this->value . "]");
    $this->token = self::FLAGLEFT;
}

"(f b 0)" {
    if ($this->debug) $this->logger->log("bottom flag [" . $this->value . "]");
    $this->token = self::FLAGBOTTOM;
}

FLAG {
    if ($this->debug) $this->logger->log("virtual flag [" . $this->value . "]");
    $this->token = self::VIRTUALFLAG;
}

"p " {
    if ($this->debug) $this->logger->log("player [" . $this->value . "]");
    $this->token = self::PLAYER;
    $this->N--;
}

"(" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->yypushstate(self::INTAG);
    $this->token = self::OPENPAREN;
}

")" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->token = self::CLOSEPAREN;
    $this->yypopstate();
}

"init" {
    if ($this->debug) $this->logger->log("init [" . $this->value . "]");
    $this->token = self::INIT;
}

"\"" {
    if ($this->debug) $this->logger->log("begin string");
    $this->yypushstate(self::INSTRING);
    $this->_string = '';
    $this->N++; // skip the opening quote
    return true;
}

"reconnect" {
    if ($this->debug) $this->logger->log("reconnect [" . $this->value . "]");
    $this->token = self::RECONNECT;
}

"version" {
    if ($this->debug) $this->logger->log("version [" . $this->value . "]");
    $this->token = self::VERSION;
}

"hear " {
    if ($this->debug) $this->logger->log("hear [" . $this->value . "]");
    $this->token = self::HEAR;
    $this->N--;
}

"clang " {
    if ($this->debug) $this->logger->log("clang [" . $this->value . "]");
    $this->token = self::CLANG;
    $this->N--;
}

"goalie " {
    if ($this->debug) $this->logger->log("goalie [" . $this->value . "]");
    $this->token = self::GOALIE;
    $this->N--;
}

"goalie)" {
    if ($this->debug) $this->logger->log("goalie [" . $this->value . "]");
    $this->token = self::GOALIE;
    $this->N--;
}

"view_mode" {
    if ($this->debug) $this->logger->log("view_mode [" . $this->value . "]");
    $this->token = self::VIEWMODE;
}

"error" {
    if ($this->debug) $this->logger->log("error [" . $this->value . "]");
    $this->token = self::ERROR;
}

"warning" {
    if ($this->debug) $this->logger->log("warning [" . $this->value . "]");
    $this->token = self::WARNING;
}

"server_param" {
    if ($this->debug) $this->logger->log("server_param [" . $this->value . "]");
    $this->token = self::SERVERPARAM;
}

"player_param" {
    if ($this->debug) $this->logger->log("player_param [" . $this->value . "]");
    $this->token = self::PLAYERPARAM;
}

"player_type " {
    if ($this->debug) $this->logger->log("player_type [" . $this->value . "]");
    $this->token = self::PLAYERTYPE;
    $this->N--;
}

"see" {
    if ($this->debug) $this->logger->log("see [" . $this->value . "]");
    $this->token = self::SEE;
}

"sense_body " {
    if ($this->debug) $this->logger->log("sense_body [" . $this->value . "]");
    $this->token = self::SENSEBODY;
    $this->N--;
}

"stamina " {
    if ($this->debug) $this->logger->log("stamina [" . $this->value . "]");
    $this->token = self::STAMINA;
    $this->N--;
}

"speed" {
    if ($this->debug) $this->logger->log("speed [" . $this->value . "]");
    $this->token = self::SPEED;
}

"arm" {
    if ($this->debug) $this->logger->log("arm [" . $this->value . "]");
    $this->token = self::ARM;
}

"target" {
    if ($this->debug) $this->logger->log("target [" . $this->value . "]");
    $this->token = self::TARGET;
}

"focus" {
    if ($this->debug) $this->logger->log("focus [" . $this->value . "]");
    $this->token = self::FOCUS;
}

"collision" {
    if ($this->debug) $this->logger->log("collision [" . $this->value . "]");
    $this->token = self::COLLISION;
}

"tackle " {
    if ($this->debug) $this->logger->log("tackle [" . $this->value . "]");
    $this->token = self::TACKLE;
    $this->N--;
}

"foul " {
    if ($this->debug) $this->logger->log("foul [" . $this->value . "]");
    $this->token = self::FOUL;
    $this->N--;
}

"change_player_type" {
    if ($this->debug) $this->logger->log("change_player_type [" . $this->value . "]");
    $this->token = self::CHANGEPLAYERTYPE;
}

WHITESPACE {
    if ($this->debug) $this->logger->log("whitespace [" . $this->value . "]");
    return false;
}

REALNUMBER {
    if ($this->debug) $this->logger->log("real number [" . $this->value . "]");
    $this->token = self::REALNUMBER;
}

NUMBER {
    if ($this->debug) $this->logger->log("number [" . $this->value . "]");
    $this->token = self::NUMBER;
}

IDENTIFIER {
    if ($this->debug) $this->logger->log("identifier [" . $this->value . "]");
    $this->token = self::IDENTIFIER;
}
*/
/*!lex2php
%statename INSTRING
"\\" {
    if ($this->debug) $this->logger->log("string escape");
    $this->yybegin(self::INESCAPE);
    return true;
}

"\"" {
    if ($this->debug) $this->logger->log("returning string [$this->_string]");
    $this->yypopstate();
    $this->value = $this->_string;
    $this->token = self::QUOTEDSTRING;
    $this->N -= strlen($this->_string) - 1; // make sure the counter is right
    $this->_string = '';
}

STRINGCONTENTS {
    if ($this->debug) $this->logger->log("added to string [".$this->value."]");
    $this->_string .= $this->value;
    return false;
}
*/
/*!lex2php
%statename INESCAPE
ESCAPEDTHING {
    if ($this->debug) $this->logger->log("escape [".$this->value."]");
    $this->_string .= '\\' . $this->value;
    return false;
}

ANYTHINGELSE {
    if ($this->debug) $this->logger->log("non-escape [".$this->value."]");
    $this->yybegin(self::INSTRING);
    $this->_string .= $this->value;
    return true;
}
*/
}
class Exception extends \Exception {}