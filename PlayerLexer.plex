<?php
namespace ThroughBall;
class PlayerLexer
{
    /**
     * describes how to convert a token into a human-readable element for error messages
     *
     * @var array array of token number => textual description of that token
     */
    static $humanReadableTokenNames = array(
        self::INIT => 'init',
        self::IDENTIFIER => '<identifier>',
        self::OPENPAREN => '(',
        self::CLOSEPAREN => ')',
        self::SIDE => 'l|r',
        self::NUMBER => '<number>',
        self::REALNUMBER => '<real number>',
        self::VER => 'ver',
        self::OK => 'ok',
        self::COMPRESSION => 'compression',
        self::WARNING => 'warning',
        self::ERROR => 'error',
        self::RECONNECT => 'reconnect',
        self::SERVERPARAM => 'server_param',
        self::PLAYERPARAM => 'player_param',
        self::PLAYERTYPE => 'player_type',
        self::SENSEBODY => 'sense_body',
        self::VIEWMODE => 'view_mode',
        self::HIGHLOW => 'high/low',
        self::VIEWWIDTH => 'narrow/normal/wide',
        self::QUOTEDSTRING => '<string>',
        self::GOALIE => 'goalie',
        self::SEE => 'see',
        self::BALL => '< ball (b)>', // ball inside view cone
        self::UNCLEARBALL => '<unclear ball (B)>', // ball near but outside view cone
        self::UNCLEARFLAG => '<unclear flag (B)>',
        self::UNCLEARPLAYER => '<unclear player (P)>',
        self::UNCLEARGOAL => '<unclear goal (G)>',
        self::GOALL => 'left goal center point (g l)',
        self::GOALR => 'right goal center point (g r)',
        self::CENTERFLAG => 'center flag (f c)',
        self::LEFTTOPFLAG => 'corner flag left/top (f l t)',
        self::CENTERTOPFLAG => 'flag center/top (f c t)',
        self::RIGHTTOPFLAG => 'corner flag right/top (f r t)',
        self::LEFTBOTTOMFLAG => 'corner flag left/bottom (f l b)',
        self::CENTERBOTTOMFLAG => 'flag center/bottom (f c b)',
        self::RIGHTBOTTOMFLAG => 'corner flag right/bottom (f r b)',
        self::PENALTYLEFTTOP => 'penalty box left/top corner (f p l t)',
        self::PENALTYLEFTCENTER => 'penalty box left/center point (f p l c)',
        self::PENALTYLEFTBOTTOM => 'penalty box left/bottom corner (f p l b)',
        self::PENALTYRIGHTTOP => 'penalty box right/top corner (f p r t)',
        self::PENALTYRIGHTCENTER => 'penalty box right/center point (f p r c)',
        self::PENALTYRIGHTBOTTOM => 'penalty box right/bottom corner (f p r b)',
        self::GOALLEFTTOP => 'left goal, top corner (f g l t)',
        self::GOALLEFTBOTTOM => 'left goal, bottom corner (f g l b)',
        self::GOALRIGHTTOP => 'right goal, top corner (f g r t)',
        self::GOALRIGHTBOTTOM => 'right goal, bottom corner (f g r b)',
        self::LINERIGHT => 'right line (l r)',
        self::LINETOP => 'top line (l t)',
        self::LINELEFT => 'left line (l l)',
        self::LINEBOTTOM => 'bottom line (l b)',
        self::FLAGRIGHT => 'right flag (f r 0)',
        self::FLAGTOP => 'top flag (f t 0)',
        self::FLAGLEFT => 'left flag (f l 0)',
        self::FLAGBOTTOM => 'bottom flag (f b 0)',
	self::VIRTUALFLAGLT30 => 'virtual flag left top 30 (f l t 30)',
	self::VIRTUALFLAGLT20 => 'virtual flag left top 20 (f l t 20)',
	self::VIRTUALFLAGLT10 => 'virtual flag left top 10 (f l t 10)',
	self::VIRTUALFLAGLB10 => 'virtual flag left bottom 10 (f l b 10)',
	self::VIRTUALFLAGLB20 => 'virtual flag left bottom 20 (f l b 20)',
	self::VIRTUALFLAGLB30 => 'virtual flag left bottom 30 (f l b 30)',

	self::VIRTUALFLAGBL50 => 'virtual flag bottom left 50 (f b l 50)',
	self::VIRTUALFLAGBL40 => 'virtual flag bottom left 40 (f b l 40)',
	self::VIRTUALFLAGBL30 => 'virtual flag bottom left 30 (f b l 30)',
	self::VIRTUALFLAGBL20 => 'virtual flag bottom left 20 (f b l 20)',
	self::VIRTUALFLAGBL10 => 'virtual flag bottom left 10 (f b l 10)',
	self::VIRTUALFLAGBR10 => 'virtual flag bottom right 10 (f b r 10)',
	self::VIRTUALFLAGBR20 => 'virtual flag bottom right 20 (f b r 20)',
	self::VIRTUALFLAGBR30 => 'virtual flag bottom right 30 (f b r 30)',
	self::VIRTUALFLAGBR40 => 'virtual flag bottom right 40 (f b r 40)',
	self::VIRTUALFLAGBR50 => 'virtual flag bottom right 50 (f b r 50)',

	self::VIRTUALFLAGRT30 => 'virtual flag right top 30 (f r t 30)',
	self::VIRTUALFLAGRT20 => 'virtual flag right top 20 (f r t 20)',
	self::VIRTUALFLAGRT10 => 'virtual flag right top 10 (f r t 10)',
	self::VIRTUALFLAGRB10 => 'virtual flag right bottom 10 (f l t 10)',
	self::VIRTUALFLAGRB20 => 'virtual flag right bottom 20 (f l t 20)',
	self::VIRTUALFLAGRB30 => 'virtual flag right bottom 30 (f l t 30)',

	self::VIRTUALFLAGTL50 => 'virtual flag top left 50 (f t l 50)',
	self::VIRTUALFLAGTL40 => 'virtual flag top left 40 (f t l 40)',
	self::VIRTUALFLAGTL30 => 'virtual flag top left 30 (f t l 30)',
	self::VIRTUALFLAGTL20 => 'virtual flag top left 20 (f t l 20)',
	self::VIRTUALFLAGTL10 => 'virtual flag top left 10 (f t l 10)',
	self::VIRTUALFLAGTR10 => 'virtual flag top right 10 (f t r 10)',
	self::VIRTUALFLAGTR20 => 'virtual flag top right 20 (f t r 20)',
	self::VIRTUALFLAGTR30 => 'virtual flag top right 30 (f t r 30)',
	self::VIRTUALFLAGTR40 => 'virtual flag top right 40 (f t r 40)',
	self::VIRTUALFLAGTR50 => 'virtual flag top right 50 (f t r 50)',
        
        self::PLAYER => 'player (p)',
    );

    const INIT = 1;
    const IDENTIFIER = 2;
    const OPENPAREN = 3;
    const CLOSEPAREN = 4;
    const SIDE = 5;
    const NUMBER = 6;
    const REALNUMBER = 7;
    const VER = 8;
    const OK = 9;
    const COMPRESSION = 10;
    const WARNING = 11;
    const RECONNECT = 12;
    const ERROR = 13;
    const SERVERPARAM = 14;
    const PLAYERPARAM = 15;
    const PLAYERTYPE = 16;
    const SENSEBODY = 17;
    const VIEWMODE = 18;
    const HIGHLOW = 19;
    const VIEWWIDTH = 20;
    const QUOTEDSTRING = 21;
    const GOALIE = 22;
    const SEE = 23;
    const UNCLEARBALL = 24;
    const UNCLEARFLAG = 25;
    const UNCLEARPLAYER = 26;
    const UNCLEARGOAL = 27;
    const GOALL = 28;
    const GOALR = 29;
    const CENTERFLAG = 30;
    const LEFTTOPFLAG = 31;
    const CENTERTOPFLAG = 32;
    const RIGHTTOPFLAG = 33;
    const LEFTBOTTOMFLAG = 34;
    const CENTERBOTTOMFLAG = 35;
    const RIGHTBOTTOMFLAG = 36;
    const PENALTYLEFTTOP = 37;
    const PENALTYLEFTCENTER = 38;
    const PENALTYLEFTBOTTOM = 39;
    const GOALLEFTTOP = 40;
    const GOALLEFTBOTTOM = 41;
    const GOALRIGHTTOP = 42;
    const GOALRIGHTBOTTOM = 43;
    const LINERIGHT = 44;
    const LINETOP = 45;
    const LINELEFT = 46;
    const LINEBOTTOM = 47;
    const FLAGRIGHT = 48;
    const FLAGTOP = 49;
    const FLAGLEFT = 50;
    const FLAGBOTTOM = 51;
    const VIRTUALFLAGLT30 = 52;
    const VIRTUALFLAGLT20 = 53;
    const VIRTUALFLAGLT10 = 54;
    const VIRTUALFLAGLB10 = 55;
    const VIRTUALFLAGLB20 = 56;
    const VIRTUALFLAGLB30 = 57;

    const VIRTUALFLAGBL50 = 58;
    const VIRTUALFLAGBL40 = 59;
    const VIRTUALFLAGBL30 = 60;
    const VIRTUALFLAGBL20 = 61;
    const VIRTUALFLAGBL10 = 62;
    const VIRTUALFLAGBR10 = 63;
    const VIRTUALFLAGBR20 = 64;
    const VIRTUALFLAGBR30 = 65;
    const VIRTUALFLAGBR40 = 66;
    const VIRTUALFLAGBR50 = 67;

    const VIRTUALFLAGRT30 = 68;
    const VIRTUALFLAGRT20 = 69;
    const VIRTUALFLAGRT10 = 70;
    const VIRTUALFLAGRB10 = 71;
    const VIRTUALFLAGRB20 = 72;
    const VIRTUALFLAGRB30 = 73;

    const VIRTUALFLAGTL50 = 74;
    const VIRTUALFLAGTL40 = 75;
    const VIRTUALFLAGTL30 = 76;
    const VIRTUALFLAGTL20 = 77;
    const VIRTUALFLAGTL10 = 78;
    const VIRTUALFLAGTR10 = 79;
    const VIRTUALFLAGTR20 = 80;
    const VIRTUALFLAGTR30 = 81;
    const VIRTUALFLAGTR40 = 82;
    const VIRTUALFLAGTR50 = 83;
    
    const PENALTYRIGHTTOP = 84;
    const PENALTYRIGHTCENTER = 85;
    const PENALTYRIGHTBOTTOM = 86;
    const PLAYER = 87;
    const BALL = 88;

    private $input;
    public $N;
    public $token;
    public $value;
    public $line;
    public $debug = false;
    public $logger;
    private $_string = '';

    function __construct($data, Logger $log = null)
    {
        $this->input = str_replace("\r\n", "\n", $data);
        $this->N = 0;
        if (null !== $log) {
            $this->debug = true;
            $this->logger = $log;
        }
    }

    /**
     * @param array $tokens an associative array mapping token names to something else
     * @return string a comma-delimited list of human-readable names of the tokens
     */
    function getHumanReadableNames(array $tokens)
    {
        $ret = '';
        foreach ($tokens as $token) {
            if ($ret) {
                $ret .= ', ';
            }
            $ret .= self::$humanReadableTokenNames[$token];
        }
        return $ret; 
    }

    function debug()
    {
        $this->debug = true;
        $this->logger = new DebugEchoLogger;
    }

/*!lex2php
%input $this->input
%counter $this->N
%token $this->token
%value $this->value
%line $this->line

IDENTIFIER = /[\-_a-zA-Z0-9]+/
WHITESPACE = /\s+|\r|\n/
ERROR = "error"
ERRORTYPE = /[a-zA-Z_]+/
SIDE = /l|r/
NUMBER = /-?[0-9]+/
REALNUMBER = /-?[0-9]+\.[0-9]+/
HIGHLOW = /high|low/
VIEWWIDTH = /narrow|normal|wide/
FLAG = /\(f [tblr] [tblr] [1-5]0\)/

STRINGCONTENTS = /[^\["\\]+/
ESCAPEDTHING = @"|\\@
ANYTHINGELSE = /./

*/
/*!lex2php
%statename YYINITIAL

"(" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->yypushstate(self::INTAG);
    $this->token = self::OPENPAREN;
}

WHITESPACE {
    if ($this->debug) $this->logger->log("whitespace [" . $this->value . "]");
    return false;
}
*/
/*!lex2php
%statename INTAG

"(B)" {
    if ($this->debug) $this->logger->log("unclear ball [" . $this->value . "]");
    $this->token = self::UNCLEARBALL;
}

"(b)" {
    if ($this->debug) $this->logger->log("ball [" . $this->value . "]");
    $this->token = self::BALL;
}

"(P)" {
    if ($this->debug) $this->logger->log("unclear player [" . $this->value . "]");
    $this->token = self::UNCLEARPLAYER;
}

"(F)" {
    if ($this->debug) $this->logger->log("unclear flag [" . $this->value . "]");
    $this->token = self::UNCLEARFLAG;
}

"(G)" {
    if ($this->debug) $this->logger->log("unclear goal [" . $this->value . "]");
    $this->token = self::UNCLEARGOAL;
}

"(g l)" {
    if ($this->debug) $this->logger->log("left goal [" . $this->value . "]");
    $this->token = self::GOALL;
}

"(g r)" {
    if ($this->debug) $this->logger->log("right goal [" . $this->value . "]");
    $this->token = self::GOALR;
}

"(f c)" {
    if ($this->debug) $this->logger->log("center flag [" . $this->value . "]");
    $this->token = self::CENTERFLAG;
}

"(f p l t)" {
    if ($this->debug) $this->logger->log("penalty box left/top [" . $this->value . "]");
    $this->token = self::PENALTYLEFTTOP;
}

"(f p l c)" {
    if ($this->debug) $this->logger->log("penalty box left/center [" . $this->value . "]");
    $this->token = self::PENALTYLEFTCENTER;
}

"(f p l b)" {
    if ($this->debug) $this->logger->log("penalty box left/bottom [" . $this->value . "]");
    $this->token = self::PENALTYLEFTBOTTOM;
}

"(f p r t)" {
    if ($this->debug) $this->logger->log("penalty box right/top [" . $this->value . "]");
    $this->token = self::PENALTYRIGHTTOP;
}

"(f p r c)" {
    if ($this->debug) $this->logger->log("penalty box right/center [" . $this->value . "]");
    $this->token = self::PENALTYRIGHTCENTER;
}

"(f p r b)" {
    if ($this->debug) $this->logger->log("penalty box right/bottom [" . $this->value . "]");
    $this->token = self::PENALTYRIGHTBOTTOM;
}

"(f l t)" {
    if ($this->debug) $this->logger->log("corner flag left/top [" . $this->value . "]");
    $this->token = self::LEFTTOPFLAG;
}

"(f c t)" {
    if ($this->debug) $this->logger->log("flag center/top [" . $this->value . "]");
    $this->token = self::CENTERTOPFLAG;
}

"(f r t)" {
    if ($this->debug) $this->logger->log("corner flag right/top [" . $this->value . "]");
    $this->token = self::RIGHTTOPFLAG;
}

"(f l b)" {
    if ($this->debug) $this->logger->log("corner flag left/bottom [" . $this->value . "]");
    $this->token = self::LEFTBOTTOMFLAG;
}

"(f c b)" {
    if ($this->debug) $this->logger->log("flag center/bottom [" . $this->value . "]");
    $this->token = self::CENTERBOTTOMFLAG;
}

"(f r b)" {
    if ($this->debug) $this->logger->log("corner flag right/bottom [" . $this->value . "]");
    $this->token = self::RIGHTBOTTOMFLAG;
}

"(f g l t)" {
    if ($this->debug) $this->logger->log("left goal top corner [" . $this->value . "]");
    $this->token = self::GOALLEFTTOP;
}

"(f g l b)" {
    if ($this->debug) $this->logger->log("left goal bottom corner [" . $this->value . "]");
    $this->token = self::GOALLEFTBOTTOM;
}

"(f g r t)" {
    if ($this->debug) $this->logger->log("right goal top corner [" . $this->value . "]");
    $this->token = self::GOALRIGHTTOP;
}

"(f g r b)" {
    if ($this->debug) $this->logger->log("right goal bottom corner [" . $this->value . "]");
    $this->token = self::GOALRIGHTBOTTOM;
}

"(l r)" {
    if ($this->debug) $this->logger->log("right line [" . $this->value . "]");
    $this->token = self::LINERIGHT;
}

"(l t)" {
    if ($this->debug) $this->logger->log("top line [" . $this->value . "]");
    $this->token = self::LINETOP;
}

"(l l)" {
    if ($this->debug) $this->logger->log("left line [" . $this->value . "]");
    $this->token = self::LINELEFT;
}

"(l b)" {
    if ($this->debug) $this->logger->log("bottom line [" . $this->value . "]");
    $this->token = self::LINEBOTTOM;
}

"(f r 0)" {
    if ($this->debug) $this->logger->log("right flag [" . $this->value . "]");
    $this->token = self::FLAGRIGHT;
}

"(f t 0)" {
    if ($this->debug) $this->logger->log("top flag [" . $this->value . "]");
    $this->token = self::FLAGTOP;
}

"(f l 0)" {
    if ($this->debug) $this->logger->log("left flag [" . $this->value . "]");
    $this->token = self::FLAGLEFT;
}

"(f b 0)" {
    if ($this->debug) $this->logger->log("bottom flag [" . $this->value . "]");
    $this->token = self::FLAGBOTTOM;
}

FLAG {
    if ($this->debug) $this->logger->log("virtual flag [" . $this->value . "]");
    $flags = array(
        // left side of the field
        '(f l t 30)' => self::VIRTUALFLAGLT30,
        '(f l t 20)' => self::VIRTUALFLAGLT20,
        '(f l t 10)' => self::VIRTUALFLAGLT10,
        '(f l b 10)' => self::VIRTUALFLAGLB10,
        '(f l b 20)' => self::VIRTUALFLAGLB20,
        '(f l b 30)' => self::VIRTUALFLAGLB30,
        // bottom side of the field
        '(f b l 50)' => self::VIRTUALFLAGBL50,
        '(f b l 40)' => self::VIRTUALFLAGBL40,
        '(f b l 30)' => self::VIRTUALFLAGBL30,
        '(f b l 20)' => self::VIRTUALFLAGBL20,
        '(f b l 10)' => self::VIRTUALFLAGBL10,
        '(f b r 10)' => self::VIRTUALFLAGBR10,
        '(f b r 20)' => self::VIRTUALFLAGBR30,
        '(f b r 30)' => self::VIRTUALFLAGBR30,
        '(f b r 40)' => self::VIRTUALFLAGBR40,
        '(f b r 50)' => self::VIRTUALFLAGBR50,
        // right side of the field
        '(f r t 30)' => self::VIRTUALFLAGRT30,
        '(f r t 20)' => self::VIRTUALFLAGRT20,
        '(f r t 10)' => self::VIRTUALFLAGRT10,
        '(f r b 10)' => self::VIRTUALFLAGRB10,
        '(f r b 20)' => self::VIRTUALFLAGRB20,
        '(f r b 30)' => self::VIRTUALFLAGRB30,
        // top side of the field
        '(f t l 50)' => self::VIRTUALFLAGTL50,
        '(f t l 40)' => self::VIRTUALFLAGTL40,
        '(f t l 30)' => self::VIRTUALFLAGTL30,
        '(f t l 20)' => self::VIRTUALFLAGTL20,
        '(f t l 10)' => self::VIRTUALFLAGTL10,
        '(f t r 10)' => self::VIRTUALFLAGTR10,
        '(f t r 20)' => self::VIRTUALFLAGTR30,
        '(f t r 30)' => self::VIRTUALFLAGTR30,
        '(f t r 40)' => self::VIRTUALFLAGTR40,
        '(f t r 50)' => self::VIRTUALFLAGTR50,
    );
    $this->token = $flags[$this->value];
}
"p " {
    if ($this->debug) $this->logger->log("player [" . $this->value . "]");
    $this->token = self::PLAYER;
    $this->N--;
}

"(" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->yypushstate(self::INTAG);
    $this->token = self::OPENPAREN;
}

")" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->token = self::CLOSEPAREN;
    $this->yypopstate();
}

"init" {
    if ($this->debug) $this->logger->log("init [" . $this->value . "]");
    $this->token = self::INIT;
}

"\"" {
    if ($this->debug) $this->logger->log("begin string");
    $this->yypushstate(self::INSTRING);
    $this->_string = '';
    $this->N++; // skip the opening quote
    return true;
}

"reconnect" {
    if ($this->debug) $this->logger->log("reconnect [" . $this->value . "]");
    $this->token = self::RECONNECT;
}

"version" {
    if ($this->debug) $this->logger->log("version [" . $this->value . "]");
    $this->token = self::VERSION;
}

"clang " {
    if ($this->debug) $this->logger->log("clang [" . $this->value . "]");
    $this->token = self::CLANG;
    $this->N--;
}

"goalie " {
    if ($this->debug) $this->logger->log("goalie [" . $this->value . "]");
    $this->token = self::GOALIE;
    $this->N--;
}

"goalie)" {
    if ($this->debug) $this->logger->log("goalie [" . $this->value . "]");
    $this->token = self::GOALIE;
    $this->N--;
}

"error" {
    if ($this->debug) $this->logger->log("error [" . $this->value . "]");
    $this->yypushstate(self::INERROR);
    $this->token = self::ERROR;
}

"warning" {
    if ($this->debug) $this->logger->log("warning [" . $this->value . "]");
    $this->yypushstate(self::INERROR);
    $this->token = self::WARNING;
}

"server_param" {
    if ($this->debug) $this->logger->log("server_param [" . $this->value . "]");
    $this->token = self::SERVERPARAM;
}

"player_param" {
    if ($this->debug) $this->logger->log("player_param [" . $this->value . "]");
    $this->token = self::PLAYERPARAM;
}

"player_type" {
    if ($this->debug) $this->logger->log("player_type [" . $this->value . "]");
    $this->token = self::PLAYERTYPE;
}

"see" {
    if ($this->debug) $this->logger->log("see [" . $this->value . "]");
    $this->token = self::SEE;
}

"sense_body" {
    if ($this->debug) $this->logger->log("sense_body [" . $this->value . "]");
    $this->token = self::SENSEBODY;
}

WHITESPACE {
    if ($this->debug) $this->logger->log("whitespace [" . $this->value . "]");
    return false;
}

REALNUMBER {
    if ($this->debug) $this->logger->log("real number [" . $this->value . "]");
    $this->token = self::REALNUMBER;
}

NUMBER {
    if ($this->debug) $this->logger->log("number [" . $this->value . "]");
    $this->token = self::NUMBER;
}

IDENTIFIER {
    if ($this->debug) $this->logger->log("identifier [" . $this->value . "]");
    $this->token = self::IDENTIFIER;
}
*/
/*!lex2php
%statename INSTRING
"\\" {
    if ($this->debug) $this->logger->log("string escape");
    $this->yybegin(self::INESCAPE);
    return true;
}

"\"" {
    if ($this->debug) $this->logger->log("returning string [$this->_string]");
    $this->yypopstate();
    $this->value = $this->_string;
    $this->token = self::QUOTEDSTRING;
    $this->N -= strlen($this->_string) - 1; // make sure the counter is right
    $this->_string = '';
}

STRINGCONTENTS {
    if ($this->debug) $this->logger->log("added to string [".$this->value."]");
    $this->_string .= $this->value;
    return false;
}
*/
/*!lex2php
%statename INESCAPE
ESCAPEDTHING {
    if ($this->debug) $this->logger->log("escape [".$this->value."]");
    $this->_string .= '\\' . $this->value;
    return false;
}

ANYTHINGELSE {
    if ($this->debug) $this->logger->log("non-escape [".$this->value."]");
    $this->yybegin(self::INSTRING);
    $this->_string .= $this->value;
    return true;
}
*/
/*lex2php
%statename INERROR
ERRORTYPE {
    if ($this->debug) $this->logger->log("error type [" . $this->value . "]");
    $this->token = self::ERRORTYPE;
}

")" {
    if ($this->debug) $this->logger->log("parenthesis [" . $this->value . "]");
    $this->token = self::CLOSEPAREN;
    $this->yypopstate();
}
*/
}
class Exception extends \Exception {}

class Logger {
    function log($d) {echo $d,"\n";}
}

$a = new PlayerLexer('(see 0 ((f r t) 55.7 3) ((f g r b) 70.8 38) ((g r) 66.7 34) ((f g r t) 62.8 28) ((f p r c) 53.5 43) ((f p r t) 42.5 23) ((f t 0) 3.6 -34 0 0) ((f t r 10) 13.2 -9 0 0) ((f t r 20) 23.1 -5) ((f t r 30) 33.1 -3 0 0) ((f t r 40) 42.9 -3) ((f t r 50) 53 -2) ((f r 0) 70.8 31) ((f r t 10) 66 24) ((f r t 20) 62.8 16) ((f r t 30) 60.9 7) ((f r b 10) 76.7 38) ((f r b 20) 83.1 43) ((P) 3 180) ((p "opponent" 1 goalie) 6 0 0 0 0 0) ((p "opponent" 2) 9 0 0 0 0 0))', new Logger);
$a->debug = true;

while ($a->yylex());
